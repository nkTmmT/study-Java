src
		-main
			-java
				-package
		-test
			-java
				-package
		resource
		
		mvn -v 查看maven版本
		compile 编译
		test 测试
		package 打包
		
		clean 删除target
		install 安装jar包到本地仓库中
		
		创建目录的两种方式:
		1.archetype:generate 按照提示进行选择
		2.archetype:generate -DgroupId=组织名,公司网址的反写+项目名
												 -DartifactId=项目名-模块名
												 -Dversion=版本号
												 -Dpackage=代码所存在的包名
		
		坐标
				构件
		仓库
				本地仓库和远程仓库
		镜像仓库//在maven目录\conf\setting.xml里  <mirrors></mirrors>间添加    152行<mirror>--157</mirror>为格式
		更改仓库位置//在maven目录\conf\setting.xml里  55行添加   	53行为格式
		
		完整的项目构建过程包括:
		清理; 编译; 测试; 打包; 集成测试; 验证; 部署;
		
		maven生命周期:
		clean   清理项目  1.pre-clean  执行清理前的工作   2.clean  清理上一次构建生成的所有文件   3.post-clean  执行清理后的文件
		default 构建项目(核心)    compile; test; package; install;
		site    生成项目站点   1.pre-site  在生成项目站点前要完成的工作   2.site  生成项目的站点文档   3.post-site  在生成项目站点后要完成的工作   4.site-deploy  发布生成的站点到服务器上
		
		pom.xml解析:
		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	  <!-- 指定了当前pom的版本 -->
	  <modelVersion>4.0.0</modelVersion>

	  <groupId>反写的公司网址+项目名</groupId>
	  <artifactId>项目名+模块名</artifactId>
	  <!-- 第一个0 表示大版本号
	  		 第二个0 表示分支版本号
	  		 第三个0 表示小版本号
	  		 例如 0.0.1SNAPSHOT
	  		 后面的标识符意义:
	  		 SNAPSHOT 快照版
	  		 alpha 内部测试版
	  		 beta 公测版
	  		 release 稳定版
	  		 GA 正式发布版
	  -->
	  <version>0.0.1-SNAPSHOT</version>
	  <!-- 默认是jar包
	  		 其他还有war zip pom 包
	  -->
	  <packaging>jar</packaging>
	  
	  <!-- 项目描述名 -->
	  <name></name>
	   <!-- 项目地址 -->
  	<url>http://maven.apache.org</url>
  	<!-- 项目描述 -->
  	<description></description>
  	<!-- 开发者信息 -->
  	<developers></developers>
  	<!-- 许可证信息 -->
  	<licenses></licenses>
  	<!-- 组织信息 -->
  	<organization></organization>
  	<!-- 组织信息 -->
  	
  	<!-- 依赖信息 -->
  	<dependencies>
	    <dependency>
	      <groupId></groupId>
	      <artifactId></artifactId>
	      <version></version>
	      <type></type>
	      <scope></scope>  //表明依赖的范围
	      <!-- 设置依赖是否可选 -->
	      <optional></optional>  //有两个值true or false  默认false,子项目默认继承   true子项目必须显示引入该依赖
	      <!-- 排除依赖传递列表 -->
	      <exclusions>
	      	<exclusion></exclusion>  //比如说a.jar依赖b.jar, b.jar依赖c.jar c对于a来说就是传递依赖
	      </exclusions>   
	    </dependency>
  	</dependencies>
		<!-- 依赖的管理 -->
		<dependencyManagement>
			<dependencies>
				<dependency></dependency>   //主要定义于父模块中并不会被运行,引入到实际的依赖中
			</dependencies>
		</dependencyManagement>
		
		<!-- 添加新的功能 -->
		<build>
			<!-- 插件列表 -->
		  <plugins>
		  	<plugin>
		  		<groupId></groupId>
		  		<artifactId></artifactId>
		  		<version></version>
		  	</plugin>
		  </plugins>
		</build>
		
		<!-- 在子模块中用于继承父模块pom -->
		<parent></parent>
		<!-- 聚合运行多个maven项 -->
		<modeles></modeles>
		
		
		依赖的范围：编译; 测试; 运行
		<scope></scope>
		scope的值的意义
		compile:  默认为compile,使用此值编译测试运行都有效
		provided: 使用此值编译测试时有效 （比如说在开发JavaEE时，你在本地运行的servlet，
																			是需要调用已添加到项目中的servlet-api.jar这个jar包的。这个过程就包含了编译【就是
																			把Java文件编译成class文件的过程中也要调用】和测试【测试就是在本地运行】，那么他说
																			的运行是指，整个项目已开发完成，编译、测试通过后，将class文件或包含有class文件的war包
																			发布到服务器上的Tomcat中运行，这时启动项目，就可以直接调Tomcat中的servlet-api.jar，
																			不必再将自己的jar包添加到项目中去。也就是说当你选择provided时，项目发布时Maven不会将
																			你添加的jar包，加入到项目中。）
		runtime:  使用此值在测试运行时有效 (典型例子：JDBC驱动的实现。)
		test:     只在测试时有效
		system:   和provided一样,但可移植性差,与系统相关联
		import:   导入的范围,它只使用在dependencyManagement中,表示从其他的pom中导入的dependcy的配置
		
		依赖的传递:
		<exclusions>
	      	<exclusion></exclusion>  //比如说a.jar依赖b.jar, b.jar依赖c.jar c对于a来说就是传递依赖;如果要解除c对a的依赖那么在exclusion中的值为a的坐标groupId和artifactId,注意这里时没有version的;
	  </exclusions>
	  
	  依赖的冲突:
	  如果有a和b依赖了一个不同版本的相同构件,那么对于依赖与a,b的c来说该依赖什么版本的构件?
	  两条原则:
	  1.短路优先
	  例如
	  A->B->C->X(jar)  // ->表依赖
	  且
	  A->D->X(jar)则A会优先解析D的构件版本
	  
	  2.先声明优先
	  如果路径长度相同,则谁先声明,优先解析谁
	  例如
	  A->B;
	  A->C;
	  则在A的pom文件中的dependencies中谁先声明则A先解析谁
	  
	  
	  聚合和继承
	  聚合:将多个maven项目放入一个容器中共同操作,方法为:新建一个maven项目,在将其package方式改为pom,然后添加modules语句
	  <modules>
	  	<module></module>   //在此添加需要聚合在一起的maven项目的路径,在eclipse里可以按alt+/调出可能需要的聚合的项目
	  </modules>
	  
	  继承:同Java中类的继承,maven项目可以继承自另一个maven项目,新建一个maven项目,actifactId为项目名+parent,修改其pom.xml文件,将其package方式改为pom,再添加dependencyManagement语句
	  <dependencyManagement>
			<dependencies>
				<dependency>
					此处为需要被子maven依赖的构件的坐标						//定义于父模块中并不会被引入到实际的依赖中
				</dependency>
			</dependencies>
		</dependencyManagement>
	  
	  在子maven中添加parent语句
	  <parent>
	  	此处为父maven坐标
	  </parent>
